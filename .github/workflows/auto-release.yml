# Good example resources
# https://riggaroo.dev/using-github-actions-to-automate-our-release-process/
# https://blog.eizinger.io/12274/using-github-actions-to-automate-gitflow-style-releases

name: auto-release

on:

  # The below workflow_dispatch section is for a "manual" kick off of the
  # auto-release script. To cut a new release, navigate to the Actions section
  # of the repo and select this workflow (auto-release) on the right hand side.
  # Then, click "Run workflow" and you will be prompted to input the new
  # version (which should be major or minor).
  workflow_dispatch:
    inputs:
      version_name:
        description: "One of major or minor"
        required: true

jobs:
  release:
    name: Create a new release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup GitHub Bot configuration
        run: |
          git config --global user.email "git@github.com"
          git config --global user.name "GitHub Bot"

      # Used to show which branch the GitHub action was run from
      # Should be dev in most cases; replaces `/` with `-`
      - name: Store current branch
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Display current branch
        run: |
          echo "Current branch name: ${{ env.BRANCH_NAME }}"

      # This should be dev in most cases
      - name: Pull latest commits of current branch
        run: |
          echo "Pulling latests commits from ${{ env.BRANCH_NAME }}"
          git checkout ${{ env.BRANCH_NAME }}
          git pull

      - name: Setup Python
        uses: actions/setup-python@v2

      # Install in editable mode (`-e`) so that changes can be made
      - name: Install package
        run: |
          pip install -r requirements.txt
          pip install -e .

      # Should be included in requirements, but just in case
      - name: Install bump2version
        run: python -m pip install bumpversion # "bumpversion" installs bump2version

      # Get the new version by doing a dry run first
      - name: Dry run bumpversion
        run: |
          bumpversion --dry-run ${{ github.event.inputs.version_name }} --allow-dirty --verbose

      # This is lifted directly from the bump2version docs.
      # Version number will be saved in `env` section of each consecutive stage
      - name: Store new version number
        run: echo "version_number=`bumpversion --dry-run --list ${{ github.event.inputs.version_name }} | grep new_version | sed -r s,"^.*=",,`" >> $GITHUB_ENV

      - name: Display new version number
        run: |
          echo "version_name: ${{ github.event.inputs.version_name }}"
          echo "version_number: v${{ env.version_number }}"

      - name: Update Changelog
        run: |
          python scripts/release.py build-changelog v${{ env.version_number }} --dry-run

      # - name: Commit CHANGELOG updates
      #   run: |
      #     git config --global user.email "git@github.com"
      #     git config --global user.name "GitHub Bot"
      #     git add .
      #     git commit -m "Update CHANGELOG for auto-release v${{ env.version_number }}"
      # - name: Ensure repo status is clean
      #   run: git status

      # - name: Run bumpversion
      #   run: bumpversion ${{ github.event.inputs.version_name }} --verbose

      - name: Pull latest commits of main branch and merge current branch
        run: |
          echo "Pulling latests commits from main"
          git checkout main
          git pull
          # git merge ${{ env.BRANCH_NAME }}
          # git push

      # - name: Ensure tag creation
      #   run: git tag | grep ${{ env.version_number }}

      # - name: Build package
      #   run: |
      #     rm -f dist/*
      #     python setup.py sdist bdist_wheel
      # - name: Publish package
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}

      # - name: Push changes with tags
      #   run: git push && git push --tags

      # # This will create an actual pointer in the "Release" section of the GitHub repo
      # # The intent is to always have "latest" point to <this> release
      # - name: Create release in GitHub repo
      #   uses: ncipollo/release-action@v1
      #   with:
      #       body: "Contribution details can be found in CHANGELOG.md"
      #       token: ${{ secrets.GITHUB_TOKEN }}
      #       tag: v${{ env.version_number}}

      # Make all changes then merge, tag, and push

      - name: Ensure complete
        run: echo "Auto-release complete!"
